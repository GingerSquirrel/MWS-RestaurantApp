class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants/`}static get DATABASE_URL_REVIEWS(){return`http://localhost:${1337}/reviews/`}static getFormattedDate(a){var b="",c=new Date(a);return b+=["January","Februrary","March","April","May","June","July","August","September","October","November","December"][c.getMonth()]+" ",b+=c.getDate()+", ",b+=c.getFullYear(),b}static getReviews(a,b){fetch(DBHelper.DATABASE_URL_REVIEWS+"?restaurant_id="+a).then(c=>{200===c.status?c.json().then(d=>{b(null,d)}).catch(d=>{b(d,null)}):b("failed",null)}).catch(c=>{b(c,null)})}static moveCachedReviewsToServer(a){DBHelper.getCachedReviewDataFromDatabase().then(b=>{b.length?fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(b),headers:{"content-type":"application/json"}}).then(()=>{idb.delete("restaurant-reviews-cache"),a(null,!0)}).catch(c=>{a(c,null)}):a(null,!0)})}static getCachedReviewDataFromDatabase(){return DBHelper.openReviewsDatabaseCache().then(function(a){if(a){var b=a.transaction("reviews").objectStore("reviews");return b.getAll()}})}static openReviewsDatabaseCache(){return navigator.serviceWorker?idb.open("restaurant-reviews-cache",1,a=>{var b=a.createObjectStore("reviews",{keyPath:"restaurant_id"});b.createIndex("by-id","restaurant_id")}):Promise.resolve()}static cacheReviewToDatabase(a){return DBHelper.openReviewsDatabaseCache().then(function(b){if(b){var c=b.transaction("reviews","readwrite"),d=c.objectStore("reviews");return a.forEach(function(e){d.put(e)}),c.complete}})}static fetchReviewsByRestaurantId(a,b){DBHelper.fetchReviews((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.restaurant_id==a);e?b(null,e):b("Restaurant does not exist",null)}})}static fetchReviews(a){return DBHelper.getReviewDataFromDatabase().then(b=>{return b.length?Promise.resolve(b):DBHelper.getReviewsFromWeb()}).then(b=>{a(null,b)}).catch(b=>{a(b,null)})}static getReviewDataFromDatabase(){return DBHelper.openReviewsDatabase().then(function(a){if(a){var b=a.transaction("reviews").objectStore("reviews");return b.getAll()}})}static openReviewsDatabase(){return navigator.serviceWorker?idb.open("restaurant-reviews2",1,a=>{var b=a.createObjectStore("reviews",{keyPath:"id"});b.createIndex("by-id","id")}):Promise.resolve()}static getReviewsFromWeb(){return fetch(DBHelper.DATABASE_URL_REVIEWS).then(function(a){return a.json()}).then(a=>{return DBHelper.saveToReviewsDatabase(a),a})}static getReviewsFromWebId(a){return fetch(DBHelper.DATABASE_URL_REVIEWS+"?restaurant_id="+a).then(function(b){return b.json()}).then(b=>{return DBHelper.saveToReviewsDatabase(b),b})}static saveToReviewsDatabase(a){return DBHelper.openReviewsDatabase().then(function(b){if(b){var c=b.transaction("reviews","readwrite"),d=c.objectStore("reviews");return a.forEach(function(e){d.put(e)}),c.complete}})}static openDatabase(){return navigator.serviceWorker?idb.open("restaurant-reviews",1,a=>{var b=a.createObjectStore("restaurant",{keyPath:"id"});b.createIndex("by-id","id")}):Promise.resolve()}static saveToDatabase(a){return DBHelper.openDatabase().then(function(b){if(b){var c=b.transaction("restaurant","readwrite"),d=c.objectStore("restaurant");return a.forEach(function(e){d.put(e)}),c.complete}})}static getFromWeb(){return fetch(DBHelper.DATABASE_URL).then(function(a){return a.json()}).then(a=>{return DBHelper.saveToDatabase(a),a})}static getDataFromDatabase(){return DBHelper.openDatabase().then(function(a){if(a){var b=a.transaction("restaurant").objectStore("restaurant");return b.getAll()}})}static fetchRestaurants(a){return DBHelper.getDataFromDatabase().then(b=>{return b.length?Promise.resolve(b):DBHelper.getFromWeb()}).then(b=>{a(null,b)}).catch(b=>{a(b,null)})}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,e)=>{if(d)c(d,null);else{let f=e;"all"!=a&&(f=f.filter(g=>g.cuisine_type==a)),"all"!=b&&(f=f.filter(g=>g.neighborhood==b)),c(null,f)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){return void 0==a.photograph?`/img/0.webp`:`/img/${a.photograph}.webp`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}static serviceWorker(){"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(function(){console.log("service worker registered")}).catch(function(){console.log("service worker failed")})}}
